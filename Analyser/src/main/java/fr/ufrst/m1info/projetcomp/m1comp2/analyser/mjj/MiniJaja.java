/* MiniJaja.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. MiniJaja.java */
    package fr.ufrst.m1info.projetcomp.m1comp2.analyser.mjj;
import fr.ufrst.m1info.projetcomp.m1comp2.ast.mjj.*;


    public class MiniJaja/*@bgen(jjtree)*/implements MiniJajaTreeConstants, MiniJajaConstants {/*@bgen(jjtree)*/
  protected static JJTMiniJajaState jjtree = new JJTMiniJajaState();public static void main(String[] args) {
            System.out.println("Reading from standard input...");
            MiniJaja mjj = new MiniJaja(System.in);
            try {
                SimpleNode n = mjj.Start();
                n.dump("");
                //MiniJajaVisitor dumpVisitor = new MiniJajaDumpVisitor();
                //n.jjtAccept(dumpVisitor, null);
            } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }

  static final public SimpleNode Start() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      classe();
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               if (jjtree.nodeCreated()) {
                jjtreeCloseNodeScope(jjtn000);
               }
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
    throw new Error("Missing return statement in function");
}

        static void jjtreeOpenNodeScope(Node n) {
            ((SimpleNode)n).setLine(getToken(1).beginLine);
            ((SimpleNode)n).setColumn(getToken(1).beginColumn);
        }
        static void jjtreeCloseNodeScope(Node n) {
        }

        //------------------------------------------ FUNCTION
  static final public 

void classe() throws ParseException {/*@bgen(jjtree) classe */
  ASTclasse jjtn000 = new ASTclasse(JJTCLASSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      ident();
      jj_consume_token(LBRACE);
      decls();
      methmain();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
    }
}

  static final public void ident() throws ParseException {/*@bgen(jjtree) ident */
  ASTident jjtn000 = new ASTident(JJTIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IDENT);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
jjtn000.jjtSetValue(token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
    }
}

  static final public void decls() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FINAL:
    case VOID:
    case INT:
    case BOOLEAN:{
      decl();
      jj_consume_token(SEMICOLON);
ASTdecls jjtn001 = new ASTdecls(JJTDECLS);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtreeOpenNodeScope(jjtn001);
      try {
        decls();
      } catch (Throwable jjte001) {
if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                           if (jjtree.nodeCreated()) {
                            jjtreeCloseNodeScope(jjtn001);
                           }
                         }
      }
      break;
      }
    default:
      jj_la1[0] = jj_gen;
ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }

      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn002);
          }
        }
      }
    }
}

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FINAL:{
      jj_consume_token(FINAL);
      type();
      ident();
ASTcst jjtn001 = new ASTcst(JJTCST);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtreeOpenNodeScope(jjtn001);
      try {
        vexp();
      } catch (Throwable jjte001) {
if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  3);
                               if (jjtree.nodeCreated()) {
                                jjtreeCloseNodeScope(jjtn001);
                               }
                             }
      }
      break;
      }
    case VOID:
    case INT:
    case BOOLEAN:{
      typemeth();
      ident();
      decl_();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void decl_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      exp();
ASTtableau jjtn001 = new ASTtableau(JJTTABLEAU);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RBRACKET);
      } finally {
if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  3);
                             if (jjtree.nodeCreated()) {
                              jjtreeCloseNodeScope(jjtn001);
                             }
                           }
      }
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      entetes();
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      vars();
      instrs();
ASTmethode jjtn002 = new ASTmethode(JJTMETHODE);
                                                       boolean jjtc002 = true;
                                                       jjtree.openNodeScope(jjtn002);
                                                       jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(RBRACE);
      } finally {
if (jjtc002) {
                                                         jjtree.closeNodeScope(jjtn002,  5);
                                                         if (jjtree.nodeCreated()) {
                                                          jjtreeCloseNodeScope(jjtn002);
                                                         }
                                                       }
      }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
ASTvar jjtn003 = new ASTvar(JJTVAR);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtreeOpenNodeScope(jjtn003);
      try {
        vexp();
      } catch (Throwable jjte003) {
if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  3);
         if (jjtree.nodeCreated()) {
          jjtreeCloseNodeScope(jjtn003);
         }
       }
      }
    }
}

  static final public void vars() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FINAL:
    case VOID:
    case INT:
    case BOOLEAN:{
      var();
      jj_consume_token(SEMICOLON);
ASTvars jjtn001 = new ASTvars(JJTVARS);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtreeOpenNodeScope(jjtn001);
      try {
        vars();
      } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                          if (jjtree.nodeCreated()) {
                           jjtreeCloseNodeScope(jjtn001);
                          }
                        }
      }
      break;
      }
    default:
      jj_la1[3] = jj_gen;
ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }

      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn002);
          }
        }
      }
    }
}

  static final public void var() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:
    case INT:
    case BOOLEAN:{
      typemeth();
      ident();
      var_();
      break;
      }
    case FINAL:{
      jj_consume_token(FINAL);
      type();
      ident();
ASTcst jjtn001 = new ASTcst(JJTCST);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtreeOpenNodeScope(jjtn001);
      try {
        vexp();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  3);
                                 if (jjtree.nodeCreated()) {
                                  jjtreeCloseNodeScope(jjtn001);
                                 }
                               }
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void var_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      exp();
ASTtableau jjtn001 = new ASTtableau(JJTTABLEAU);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RBRACKET);
      } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  3);
                         if (jjtree.nodeCreated()) {
                          jjtreeCloseNodeScope(jjtn001);
                         }
                       }
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
ASTvar jjtn002 = new ASTvar(JJTVAR);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
         jjtreeOpenNodeScope(jjtn002);
      try {
        vexp();
      } catch (Throwable jjte002) {
if (jjtc002) {
           jjtree.clearNodeScope(jjtn002);
           jjtc002 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte002 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte002;}
         }
         if (jjte002 instanceof ParseException) {
           {if (true) throw (ParseException)jjte002;}
         }
         {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
           jjtree.closeNodeScope(jjtn002,  3);
           if (jjtree.nodeCreated()) {
            jjtreeCloseNodeScope(jjtn002);
           }
         }
      }
    }
}

  static final public void vexp() throws ParseException {/*@bgen(jjtree) vexp */
  ASTvexp jjtn000 = new ASTvexp(JJTVEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        exp();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
ASTomega jjtn001 = new ASTomega(JJTOMEGA);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn001);
        }

        } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn001);
          }
        }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
}

  static final public void methmain() throws ParseException {/*@bgen(jjtree) #main( 2) */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(LBRACE);
      vars();
      instrs();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
}

  static final public void entetes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:{
      entete();
ASTentetes jjtn001 = new ASTentetes(JJTENTETES);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
      try {
        entetes_();
      } catch (Throwable jjte001) {
if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn001);
                 }
               }
      }
      break;
      }
    default:
      jj_la1[7] = jj_gen;
ASTenil jjtn002 = new ASTenil(JJTENIL);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }

      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn002);
          }
        }
      }
    }
}

  static final public void entetes_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      entete();
ASTentetes jjtn001 = new ASTentetes(JJTENTETES);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
      try {
        entetes_();
      } catch (Throwable jjte001) {
if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                             if (jjtree.nodeCreated()) {
                              jjtreeCloseNodeScope(jjtn001);
                             }
                           }
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
ASTenil jjtn002 = new ASTenil(JJTENIL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }

      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }
      }
      }
    }
}

  static final public void entete() throws ParseException {
    type();
ASTentete jjtn001 = new ASTentete(JJTENTETE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
    try {
      ident();
    } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             if (jjtree.nodeCreated()) {
              jjtreeCloseNodeScope(jjtn001);
             }
           }
    }
}

  static final public void instrs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case WRITE:
    case WRITELN:
    case IF:
    case WHILE:
    case IDENT:{
      instr();
      jj_consume_token(SEMICOLON);
ASTinstrs jjtn001 = new ASTinstrs(JJTINSTRS);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
      try {
        instrs();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                                if (jjtree.nodeCreated()) {
                                 jjtreeCloseNodeScope(jjtn001);
                                }
                              }
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
ASTinil jjtn002 = new ASTinil(JJTINIL);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }

      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn002);
          }
        }
      }
    }
}

  static final public void instr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENT:{
      ident();
      instr_();
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
ASTretour jjtn001 = new ASTretour(JJTRETOUR);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
      try {
        exp();
      } catch (Throwable jjte001) {
if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   if (jjtree.nodeCreated()) {
                    jjtreeCloseNodeScope(jjtn001);
                   }
                 }
      }
      break;
      }
    case WRITE:{
      jj_consume_token(WRITE);
      jj_consume_token(LPAR);
      string_or_ident();
ASTecrire jjtn002 = new ASTecrire(JJTECRIRE);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
                                         jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(RPAR);
      } finally {
if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  1);
                                           if (jjtree.nodeCreated()) {
                                            jjtreeCloseNodeScope(jjtn002);
                                           }
                                         }
      }
      break;
      }
    case WRITELN:{
      jj_consume_token(WRITELN);
      jj_consume_token(LPAR);
      string_or_ident();
ASTecrireln jjtn003 = new ASTecrireln(JJTECRIRELN);
                                           boolean jjtc003 = true;
                                           jjtree.openNodeScope(jjtn003);
                                           jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(RPAR);
      } finally {
if (jjtc003) {
                                             jjtree.closeNodeScope(jjtn003,  1);
                                             if (jjtree.nodeCreated()) {
                                              jjtreeCloseNodeScope(jjtn003);
                                             }
                                           }
      }
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(LPAR);
      exp();
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      instrs();
      jj_consume_token(RBRACE);
ASTsi jjtn004 = new ASTsi(JJTSI);
                                                            boolean jjtc004 = true;
                                                            jjtree.openNodeScope(jjtn004);
                                                            jjtreeOpenNodeScope(jjtn004);
      try {
        _else();
      } catch (Throwable jjte004) {
if (jjtc004) {
                                                              jjtree.clearNodeScope(jjtn004);
                                                              jjtc004 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte004 instanceof RuntimeException) {
                                                              {if (true) throw (RuntimeException)jjte004;}
                                                            }
                                                            if (jjte004 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte004;}
                                                            }
                                                            {if (true) throw (Error)jjte004;}
      } finally {
if (jjtc004) {
                                                              jjtree.closeNodeScope(jjtn004,  3);
                                                              if (jjtree.nodeCreated()) {
                                                               jjtreeCloseNodeScope(jjtn004);
                                                              }
                                                            }
      }
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(LPAR);
      exp();
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      instrs();
ASTtantque jjtn005 = new ASTtantque(JJTTANTQUE);
                                                      boolean jjtc005 = true;
                                                      jjtree.openNodeScope(jjtn005);
                                                      jjtreeOpenNodeScope(jjtn005);
      try {
        jj_consume_token(RBRACE);
      } finally {
if (jjtc005) {
                                                        jjtree.closeNodeScope(jjtn005,  2);
                                                        if (jjtree.nodeCreated()) {
                                                         jjtreeCloseNodeScope(jjtn005);
                                                        }
                                                      }
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void string_or_ident() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      chaine();
      break;
      }
    case IDENT:{
      ident();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void instr_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:
    case ASSIGN:
    case INCR:
    case PLUSASSIGN:{
      ident_();
      instr__();
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      listexp();
ASTappelI jjtn001 = new ASTappelI(JJTAPPELI);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RPAR);
      } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                           if (jjtree.nodeCreated()) {
                            jjtreeCloseNodeScope(jjtn001);
                           }
                         }
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void ident_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      exp();
ASTtab jjtn001 = new ASTtab(JJTTAB);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RBRACKET);
      } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                               if (jjtree.nodeCreated()) {
                                jjtreeCloseNodeScope(jjtn001);
                               }
                             }
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
}

  static final public void instr__() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
ASTaffectation jjtn001 = new ASTaffectation(JJTAFFECTATION);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
      try {
        exp();
      } catch (Throwable jjte001) {
if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn001);
                 }
               }
      }
      break;
      }
    case PLUSASSIGN:{
      jj_consume_token(PLUSASSIGN);
ASTsomme jjtn002 = new ASTsomme(JJTSOMME);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtreeOpenNodeScope(jjtn002);
      try {
        exp();
      } catch (Throwable jjte002) {
if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                       if (jjtree.nodeCreated()) {
                        jjtreeCloseNodeScope(jjtn002);
                       }
                     }
      }
      break;
      }
    case INCR:{
ASTincrement jjtn003 = new ASTincrement(JJTINCREMENT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(INCR);
      } finally {
if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  1);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn003);
          }
        }
      }
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void _else() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      jj_consume_token(LBRACE);
      instrs();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
ASTinil jjtn001 = new ASTinil(JJTINIL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn001);
        }

      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn001);
          }
        }
      }
    }
}

  static final public void listexp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LENGTH:
    case TRUE:
    case FALSE:
    case LPAR:
    case BANG:
    case MINUS:
    case NOMBRE:
    case IDENT:{
      exp();
ASTlistexp jjtn001 = new ASTlistexp(JJTLISTEXP);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
      try {
        listexp_();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn001);
              }
            }
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
ASTexnil jjtn002 = new ASTexnil(JJTEXNIL);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }

      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn002);
          }
        }
      }
    }
}

  static final public void listexp_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      exp();
ASTlistexp jjtn001 = new ASTlistexp(JJTLISTEXP);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
      try {
        listexp_();
      } catch (Throwable jjte001) {
if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                      if (jjtree.nodeCreated()) {
                       jjtreeCloseNodeScope(jjtn001);
                      }
                    }
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;
ASTexnil jjtn002 = new ASTexnil(JJTEXNIL);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }

      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn002);
          }
        }
      }
    }
}

  static final public void exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BANG:{
      jj_consume_token(BANG);
ASTnon jjtn001 = new ASTnon(JJTNON);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
      try {
        exp1();
      } catch (Throwable jjte001) {
if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               if (jjtree.nodeCreated()) {
                jjtreeCloseNodeScope(jjtn001);
               }
             }
      }
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
ASTneg jjtn002 = new ASTneg(JJTNEG);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtreeOpenNodeScope(jjtn002);
      try {
        exp1();
      } catch (Throwable jjte002) {
if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte002;}
                }
                if (jjte002 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte002;}
                }
                {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                  if (jjtree.nodeCreated()) {
                   jjtreeCloseNodeScope(jjtn002);
                  }
                }
      }
      break;
      }
    case LENGTH:
    case TRUE:
    case FALSE:
    case LPAR:
    case NOMBRE:
    case IDENT:{
      exp1();
      exp_();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void exp_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:
    case AND:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        exp1();
ASTet jjtn001 = new ASTet(JJTET);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtreeOpenNodeScope(jjtn001);
        try {
          exp_();
        } catch (Throwable jjte001) {
if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                         if (jjtree.nodeCreated()) {
                          jjtreeCloseNodeScope(jjtn001);
                         }
                       }
        }
        break;
        }
      case OR:{
        jj_consume_token(OR);
        exp1();
ASTou jjtn002 = new ASTou(JJTOU);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtreeOpenNodeScope(jjtn002);
        try {
          exp_();
        } catch (Throwable jjte002) {
if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte002;}
                        }
                        if (jjte002 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte002;}
                        }
                        {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002,  2);
                          if (jjtree.nodeCreated()) {
                           jjtreeCloseNodeScope(jjtn002);
                          }
                        }
        }
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
}

  static final public void exp1() throws ParseException {
    exp2();
    exp1_();
}

  static final public void exp1_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:
    case GT:
    case LT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
ASTegal jjtn001 = new ASTegal(JJTEGAL);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
        try {
          exp2();
        } catch (Throwable jjte001) {
if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn001);
                 }
               }
        }
        break;
        }
      case LT:{
        jj_consume_token(LT);
ASTinf jjtn002 = new ASTinf(JJTINF);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
                 jjtreeOpenNodeScope(jjtn002);
        try {
          exp2();
        } catch (Throwable jjte002) {
if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte002;}
                 }
                 if (jjte002 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte002;}
                 }
                 {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                   if (jjtree.nodeCreated()) {
                    jjtreeCloseNodeScope(jjtn002);
                   }
                 }
        }
        break;
        }
      case GT:{
        jj_consume_token(GT);
ASTsup jjtn003 = new ASTsup(JJTSUP);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
                 jjtreeOpenNodeScope(jjtn003);
        try {
          exp2();
        } catch (Throwable jjte003) {
if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte003;}
                 }
                 if (jjte003 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte003;}
                 }
                 {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  2);
                   if (jjtree.nodeCreated()) {
                    jjtreeCloseNodeScope(jjtn003);
                   }
                 }
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
}

  static final public void exp2() throws ParseException {
    terme();
    exp2_();
}

  static final public void exp2_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        terme();
ASTplus jjtn001 = new ASTplus(JJTPLUS);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtreeOpenNodeScope(jjtn001);
        try {
          exp2_();
        } catch (Throwable jjte001) {
if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                           if (jjtree.nodeCreated()) {
                            jjtreeCloseNodeScope(jjtn001);
                           }
                         }
        }
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        terme();
ASTmoins jjtn002 = new ASTmoins(JJTMOINS);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                            jjtreeOpenNodeScope(jjtn002);
        try {
          exp2_();
        } catch (Throwable jjte002) {
if (jjtc002) {
                              jjtree.clearNodeScope(jjtn002);
                              jjtc002 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte002 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte002;}
                            }
                            if (jjte002 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte002;}
                            }
                            {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002,  2);
                              if (jjtree.nodeCreated()) {
                               jjtreeCloseNodeScope(jjtn002);
                              }
                            }
        }
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
}

  static final public void terme() throws ParseException {
    fact();
    terme_();
}

  static final public void terme_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:
    case SLASH:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
        fact();
ASTmult jjtn001 = new ASTmult(JJTMULT);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtreeOpenNodeScope(jjtn001);
        try {
          terme_();
        } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                          if (jjtree.nodeCreated()) {
                           jjtreeCloseNodeScope(jjtn001);
                          }
                        }
        }
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
        fact();
ASTdiv jjtn002 = new ASTdiv(JJTDIV);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                           jjtreeOpenNodeScope(jjtn002);
        try {
          terme_();
        } catch (Throwable jjte002) {
if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte002;}
                           }
                           if (jjte002 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte002;}
                           }
                           {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                             if (jjtree.nodeCreated()) {
                              jjtreeCloseNodeScope(jjtn002);
                             }
                           }
        }
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
}

  static final public void fact() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENT:{
      ident();
      fact_();
      break;
      }
    case LENGTH:{
      jj_consume_token(LENGTH);
      jj_consume_token(LPAR);
      jj_consume_token(IDENT);
ASTlongueur jjtn001 = new ASTlongueur(JJTLONGUEUR);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                                jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RPAR);
      } finally {
if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  if (jjtree.nodeCreated()) {
                                   jjtreeCloseNodeScope(jjtn001);
                                  }
                                }
      }
      break;
      }
    case TRUE:{
ASTvrai jjtn002 = new ASTvrai(JJTVRAI);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn002);
          }
        }
      }
      break;
      }
    case FALSE:{
ASTfaux jjtn003 = new ASTfaux(JJTFAUX);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn003);
          }
        }
      }
      break;
      }
    case NOMBRE:{
      nbre();
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      exp();
      jj_consume_token(RPAR);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void fact_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
ASTappelE jjtn001 = new ASTappelE(JJTAPPELE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(LPAR);
        listexp();
        jj_consume_token(RPAR);
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn001);
        }
      }
      }
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ident_();
    }
}

  static final public void nbre() throws ParseException {/*@bgen(jjtree) nbre */
                     ASTnbre jjtn000 = new ASTnbre(JJTNBRE);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
                     jjtreeOpenNodeScope(jjtn000);int x;
    try {
      jj_consume_token(NOMBRE);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   if (jjtree.nodeCreated()) {
                    jjtreeCloseNodeScope(jjtn000);
                   }
try { x = Integer.parseInt(token.image);
                } catch (NumberFormatException ee) {
                   System.err.println("Error: " + token.image + " is not a number.");
                   x = 0;
                }
                jjtn000.jjtSetValue(x);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
          }
    }
}

  static final public void typemeth() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
ASTrien jjtn001 = new ASTrien(JJTRIEN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(VOID);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn001);
        }
      }
      }
      break;
      }
    case INT:
    case BOOLEAN:{
      type();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
ASTentier jjtn001 = new ASTentier(JJTENTIER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(INT);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn001);
        }
      }
      }
      break;
      }
    case BOOLEAN:{
ASTbooleen jjtn002 = new ASTbooleen(JJTBOOLEEN);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(BOOLEAN);
      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn002);
          }
        }
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void chaine() throws ParseException {/*@bgen(jjtree) chaine */
  ASTchaine jjtn000 = new ASTchaine(JJTCHAINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             if (jjtree.nodeCreated()) {
              jjtreeCloseNodeScope(jjtn000);
             }
jjtn000.jjtSetValue(token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJajaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x100,0x100,0x2800000,0x100,0x100,0x2000000,0x10000000,0x0,0x400000,0xbc00,0xbc00,0x0,0xd2800000,0x2000000,0xd0000000,0x4000,0x20870000,0x400000,0x20870000,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x870000,0x800000,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xe00,0xe00,0x0,0xe00,0xe00,0x0,0x0,0xc00,0x0,0x4000,0x4000,0x6000,0x0,0x0,0x0,0x0,0x5002,0x0,0x5002,0x30,0x30,0xc0,0xc0,0x3,0x3,0xc,0xc,0x5000,0x0,0xe00,0xc00,};
	}

  /** Constructor with InputStream. */
  public MiniJaja(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJaja(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniJajaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniJaja(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MiniJajaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniJajaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniJaja(MiniJajaTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniJajaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[49];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 31; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 49; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
