/* JajaCode.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. JajaCode.java */
package fr.ufrst.m1info.projetcomp.m1comp2.analyser.jjc;

import fr.ufrst.m1info.projetcomp.m1comp2.ast.jjc.*;

public class JajaCode/* @bgen(jjtree) */ implements JajaCodeTreeConstants, JajaCodeConstants {/* @bgen(jjtree) */
  protected static JJTJajaCodeState jjtree = new JJTJajaCodeState();

  public static void main(String arg[]) throws ParseException {
    JajaCode jjc = new JajaCode(System.in);
    try {
      SimpleNode n = jjc.Start();
      n.dump("");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

  /** -------------------- Grammaire ------------------------- */
  /**
   * <classe> := <adresse> <instrs> ";" <classe>
   * :=
   * <instrs> := "init"
   * := "swap"
   * := "new" "(" <ident> "," <type> "," <sorte> "," <adresse> ")"
   * := "newarray" "(" <ident> "," <type> ")"
   * := "invoke" "(" <ident> ")"
   * := "return"
   * := "push" "(" <valeur> ")"
   * := "pop"
   * := "load" "(" <ident> ")"
   * := "aload" "(" <ident> ")"
   * := "store" "(" <ident> ")"
   * := "astore" "(" <ident> ")"
   * := "if" "(" <adresse> ")"
   * := "goto" "(" <adresse> ")"
   * := "inc" "(" <ident> ")"
   * := "ainc" "(" <ident> ")"
   * := <oper>
   * := "nop"
   * := "jcstop"
   * <ident> := ["a-"z","A"-"Z"] (["a-"z","A"-"Z","0"-"9"])*
   * <type> := "entier"
   * := "booleen"
   * := "void"
   * <sorte> := "var"
   * := "meth"
   * := "cst"
   * <nombre> := ["0"-"9"] (["0"-"9"])*
   * := "vrai"
   * := "faux"
   * :=
   * <oper> := <oper2>
   * := <oper1>
   * <oper1> := "neg"
   * := "not"
   * <oper2> := "add"
   * := "sub"
   * := "mul"
   * := "div"
   * := "cmp"
   * := "sup"
   * := "or"
   * := "and"
   *
   **/
  static final public SimpleNode Start() throws ParseException {/* @bgen(jjtree) Start */
    ASTStart jjtn000 = new ASTStart(JJTSTART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      Classe();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {
        if ("" != null)
          return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  /** ---------------- Regles syntaxiques --------------------- */
  static final public

      void Classe() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case NOMBRE: {
        Adresse();
        Instrs();
        jj_consume_token(POINTVIRGULE);
        ASTJajaCode jjtn001 = new ASTJajaCode(JJTJAJACODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          Classe();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {
              if (true)
                throw (RuntimeException) jjte001;
            }
          }
          if (jjte001 instanceof ParseException) {
            {
              if (true)
                throw (ParseException) jjte001;
            }
          }
          {
            if (true)
              throw (Error) jjte001;
          }
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, 3);
          }
        }
        break;
      }
      default:
        jj_la1[0] = jj_gen;
        ASTJCNil jjtn002 = new ASTJCNil(JJTJCNIL);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;

        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
    }
  }

  static final public void Instrs() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case INIT: {
        ASTInit jjtn001 = new ASTInit(JJTINIT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(INIT);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        break;
      }
      case SWAP: {
        ASTSwap jjtn002 = new ASTSwap(JJTSWAP);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(SWAP);
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
        break;
      }
      case NEW: {
        jj_consume_token(NEW);
        jj_consume_token(PAROUV);
        Ident();
        jj_consume_token(VIRGULE);
        Type();
        jj_consume_token(VIRGULE);
        Sorte();
        jj_consume_token(VIRGULE);
        Adresse();
        ASTNew jjtn003 = new ASTNew(JJTNEW);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, 4);
          }
        }
        break;
      }
      case NEWARRAY: {
        jj_consume_token(NEWARRAY);
        jj_consume_token(PAROUV);
        Ident();
        jj_consume_token(VIRGULE);
        Type();
        ASTNewArray jjtn004 = new ASTNewArray(JJTNEWARRAY);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, 2);
          }
        }
        break;
      }
      case INVOKE: {
        jj_consume_token(INVOKE);
        jj_consume_token(PAROUV);
        Ident();
        ASTInvoke jjtn005 = new ASTInvoke(JJTINVOKE);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, 1);
          }
        }
        break;
      }
      case RETURN: {
        ASTReturn jjtn006 = new ASTReturn(JJTRETURN);
        boolean jjtc006 = true;
        jjtree.openNodeScope(jjtn006);
        try {
          jj_consume_token(RETURN);
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
        break;
      }
      case WRITE: {
        ASTWrite jjtn007 = new ASTWrite(JJTWRITE);
        boolean jjtc007 = true;
        jjtree.openNodeScope(jjtn007);
        try {
          jj_consume_token(WRITE);
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
        break;
      }
      case WRITELN: {
        ASTWriteln jjtn008 = new ASTWriteln(JJTWRITELN);
        boolean jjtc008 = true;
        jjtree.openNodeScope(jjtn008);
        try {
          jj_consume_token(WRITELN);
        } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
          }
        }
        break;
      }
      case PUSH: {
        jj_consume_token(PUSH);
        jj_consume_token(PAROUV);
        Valeur();
        ASTPush jjtn009 = new ASTPush(JJTPUSH);
        boolean jjtc009 = true;
        jjtree.openNodeScope(jjtn009);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009, 1);
          }
        }
        break;
      }
      case POP: {
        ASTPop jjtn010 = new ASTPop(JJTPOP);
        boolean jjtc010 = true;
        jjtree.openNodeScope(jjtn010);
        try {
          jj_consume_token(POP);
        } finally {
          if (jjtc010) {
            jjtree.closeNodeScope(jjtn010, true);
          }
        }
        break;
      }
      case LOAD: {
        jj_consume_token(LOAD);
        jj_consume_token(PAROUV);
        Ident();
        ASTLoad jjtn011 = new ASTLoad(JJTLOAD);
        boolean jjtc011 = true;
        jjtree.openNodeScope(jjtn011);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc011) {
            jjtree.closeNodeScope(jjtn011, 1);
          }
        }
        break;
      }
      case ALOAD: {
        jj_consume_token(ALOAD);
        jj_consume_token(PAROUV);
        Ident();
        ASTALoad jjtn012 = new ASTALoad(JJTALOAD);
        boolean jjtc012 = true;
        jjtree.openNodeScope(jjtn012);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc012) {
            jjtree.closeNodeScope(jjtn012, 1);
          }
        }
        break;
      }
      case STORE: {
        jj_consume_token(STORE);
        jj_consume_token(PAROUV);
        Ident();
        ASTStore jjtn013 = new ASTStore(JJTSTORE);
        boolean jjtc013 = true;
        jjtree.openNodeScope(jjtn013);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc013) {
            jjtree.closeNodeScope(jjtn013, 1);
          }
        }
        break;
      }
      case ASTORE: {
        jj_consume_token(ASTORE);
        jj_consume_token(PAROUV);
        Ident();
        ASTAStore jjtn014 = new ASTAStore(JJTASTORE);
        boolean jjtc014 = true;
        jjtree.openNodeScope(jjtn014);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc014) {
            jjtree.closeNodeScope(jjtn014, 1);
          }
        }
        break;
      }
      case IF: {
        jj_consume_token(IF);
        jj_consume_token(PAROUV);
        Adresse();
        ASTIf jjtn015 = new ASTIf(JJTIF);
        boolean jjtc015 = true;
        jjtree.openNodeScope(jjtn015);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc015) {
            jjtree.closeNodeScope(jjtn015, 1);
          }
        }
        break;
      }
      case GOTO: {
        jj_consume_token(GOTO);
        jj_consume_token(PAROUV);
        Adresse();
        ASTGoto jjtn016 = new ASTGoto(JJTGOTO);
        boolean jjtc016 = true;
        jjtree.openNodeScope(jjtn016);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc016) {
            jjtree.closeNodeScope(jjtn016, 1);
          }
        }
        break;
      }
      case INC: {
        jj_consume_token(INC);
        jj_consume_token(PAROUV);
        Ident();
        ASTInc jjtn017 = new ASTInc(JJTINC);
        boolean jjtc017 = true;
        jjtree.openNodeScope(jjtn017);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc017) {
            jjtree.closeNodeScope(jjtn017, 1);
          }
        }
        break;
      }
      case AINC: {
        jj_consume_token(AINC);
        jj_consume_token(PAROUV);
        Ident();
        ASTAInc jjtn018 = new ASTAInc(JJTAINC);
        boolean jjtc018 = true;
        jjtree.openNodeScope(jjtn018);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc018) {
            jjtree.closeNodeScope(jjtn018, 1);
          }
        }
        break;
      }
      case LENGTH: {
        jj_consume_token(LENGTH);
        jj_consume_token(PAROUV);
        Ident();
        ASTLength jjtn019 = new ASTLength(JJTLENGTH);
        boolean jjtc019 = true;
        jjtree.openNodeScope(jjtn019);
        try {
          jj_consume_token(PARFERM);
        } finally {
          if (jjtc019) {
            jjtree.closeNodeScope(jjtn019, 1);
          }
        }
        break;
      }
      case NOP: {
        ASTNop jjtn020 = new ASTNop(JJTNOP);
        boolean jjtc020 = true;
        jjtree.openNodeScope(jjtn020);
        try {
          jj_consume_token(NOP);
        } finally {
          if (jjtc020) {
            jjtree.closeNodeScope(jjtn020, true);
          }
        }
        break;
      }
      case JCSTOP: {
        ASTJCStop jjtn021 = new ASTJCStop(JJTJCSTOP);
        boolean jjtc021 = true;
        jjtree.openNodeScope(jjtn021);
        try {
          jj_consume_token(JCSTOP);
        } finally {
          if (jjtc021) {
            jjtree.closeNodeScope(jjtn021, true);
          }
        }
        break;
      }
      case ADD:
      case AND:
      case CMP:
      case DIV:
      case INF:
      case MUL:
      case NEG:
      case NOT:
      case OR:
      case SUB:
      case SUP: {
        Oper();
        break;
      }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  static final public void Ident() throws ParseException {/* @bgen(jjtree) JCIdent */
    ASTJCIdent jjtn000 = new ASTJCIdent(JJTJCIDENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Type() throws ParseException {/* @bgen(jjtree) JCType */
    ASTJCType jjtn000 = new ASTJCType(JJTJCTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case ENTIER: {
          jj_consume_token(ENTIER);
          break;
        }
        case BOOLEEN: {
          jj_consume_token(BOOLEEN);
          break;
        }
        case VOID: {
          jj_consume_token(VOID);
          break;
        }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Sorte() throws ParseException {/* @bgen(jjtree) JCSorte */
    ASTJCSorte jjtn000 = new ASTJCSorte(JJTJCSORTE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case VAR: {
          jj_consume_token(VAR);
          break;
        }
        case METH: {
          jj_consume_token(METH);
          break;
        }
        case CST: {
          jj_consume_token(CST);
          break;
        }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Valeur() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case TRUE: {
        ValTrue();
        break;
      }
      case FALSE: {
        ValFalse();
        break;
      }
      case NOMBRE: {
        Nombre();
        break;
      }
      case STRING: {
        String();
        break;
      }
      default:
        jj_la1[4] = jj_gen;
        ASTJCNil jjtn001 = new ASTJCNil(JJTJCNIL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;

        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
    }
  }

  static final public void Adresse() throws ParseException {
    Nombre();
  }

  static final public void Oper() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case ADD:
      case AND:
      case CMP:
      case DIV:
      case INF:
      case MUL:
      case OR:
      case SUB:
      case SUP: {
        Oper2();
        break;
      }
      case NEG:
      case NOT: {
        Oper1();
        break;
      }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  static final public void Oper1() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case NEG: {
        ASTNeg jjtn001 = new ASTNeg(JJTNEG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(NEG);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        break;
      }
      case NOT: {
        ASTNot jjtn002 = new ASTNot(JJTNOT);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(NOT);
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
        break;
      }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  static final public void Oper2() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case ADD: {
        ASTAdd jjtn001 = new ASTAdd(JJTADD);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(ADD);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        break;
      }
      case SUB: {
        ASTSub jjtn002 = new ASTSub(JJTSUB);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(SUB);
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
        break;
      }
      case MUL: {
        ASTMul jjtn003 = new ASTMul(JJTMUL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(MUL);
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
        break;
      }
      case DIV: {
        ASTDiv jjtn004 = new ASTDiv(JJTDIV);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(DIV);
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
        break;
      }
      case CMP: {
        ASTCmp jjtn005 = new ASTCmp(JJTCMP);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(CMP);
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
        break;
      }
      case SUP: {
        ASTSup jjtn006 = new ASTSup(JJTSUP);
        boolean jjtc006 = true;
        jjtree.openNodeScope(jjtn006);
        try {
          jj_consume_token(SUP);
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
        break;
      }
      case INF: {
        ASTInf jjtn007 = new ASTInf(JJTINF);
        boolean jjtc007 = true;
        jjtree.openNodeScope(jjtn007);
        try {
          jj_consume_token(INF);
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
        break;
      }
      case OR: {
        ASTOr jjtn008 = new ASTOr(JJTOR);
        boolean jjtc008 = true;
        jjtree.openNodeScope(jjtn008);
        try {
          jj_consume_token(OR);
        } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
          }
        }
        break;
      }
      case AND: {
        ASTAnd jjtn009 = new ASTAnd(JJTAND);
        boolean jjtc009 = true;
        jjtree.openNodeScope(jjtn009);
        try {
          jj_consume_token(AND);
        } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009, true);
          }
        }
        break;
      }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  static final public void Nombre() throws ParseException {/* @bgen(jjtree) #JCNbre(true) */
    ASTJCNbre jjtn000 = new ASTJCNbre(JJTJCNBRE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    int x = 0;
    try {
      jj_consume_token(NOMBRE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      try {
        x = Integer.parseInt(token.image);
      } catch (NumberFormatException ee) {
        System.err.println("Error: " + token.image + " is not a number.");
        x = 0;
      }
      jjtn000.jjtSetValue(x);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ValTrue() throws ParseException {/* @bgen(jjtree) JCVrai */
    ASTJCVrai jjtn000 = new ASTJCVrai(JJTJCVRAI);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    boolean x = true;
    try {
      jj_consume_token(TRUE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      try {
        x = Boolean.parseBoolean(token.image);
      } catch (Exception ee) {
        System.err.println("Error: " + token.image + " is not a number.");
        x = false;
      }
      jjtn000.jjtSetValue(x);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ValFalse() throws ParseException {/* @bgen(jjtree) JCFaux */
    ASTJCFaux jjtn000 = new ASTJCFaux(JJTJCFAUX);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    boolean x = true;
    try {
      jj_consume_token(FALSE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      try {
        x = Boolean.parseBoolean(token.image);
      } catch (Exception ee) {
        System.err.println("Error: " + token.image + " is not a number.");
        x = false;
      }
      jjtn000.jjtSetValue(x);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void String() throws ParseException {/* @bgen(jjtree) JCString */
    ASTJCString jjtn000 = new ASTJCString(JJTJCSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JajaCodeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
    jj_la1_init_0();
    jj_la1_init_1();
  }

  private static void jj_la1_init_0() {
    jj_la1_0 = new int[] { 0x0, 0xfeff33e0, 0x4400, 0x1000800, 0x8000, 0xc6083120, 0x44000000, 0x82083120, };
  }

  private static void jj_la1_init_1() {
    jj_la1_1 = new int[] { 0x40000, 0x1c07f, 0x2000, 0x1000, 0xc0080, 0x30, 0x0, 0x30, };
  }

  /** Constructor with InputStream. */
  public JajaCode(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public JajaCode(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("	   during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try {
      jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new JajaCodeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  /** Constructor. */
  public JajaCode(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("	   during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JajaCodeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
    } else {
      jj_input_stream.ReInit(stream, 1, 1);
    }
    if (token_source == null) {
      token_source = new JajaCodeTokenManager(jj_input_stream);
    }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JajaCode(JajaCodeTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("	   during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JajaCodeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  /** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  /** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null)
        t = t.next;
      else
        t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt = token.next) == null)
      return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0) {
            la1tokens[32 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

  /** Trace enabled. */
  static final public boolean trace_enabled() {
    return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
